/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product.dsf;

import com.opengamma.strata.basics.ReferenceData;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.product.*;
import com.opengamma.strata.product.common.SummarizerUtils;
import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableDefaults;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;

/**
 * 代表基于利率互换的期货合约的交易。
 * <p>
 * 代表{@link Dsf}的交易。
 * <p>
 * <h4>Price</h4>
 * DSF的价格基于交割日基础swap的现值（NPV）。
 * 例如，如果名义价值为100000美元，则100.182的价格代表100182.00美元的现值。
 * 在本例中，该价格也可以视为百分比现值{@code (100 + percentPv)}，或0.182%。
 * <p>
 * Strata在贸易模型、价格和市场数据中对DSF使用了十进制价格（decimal prices）。
 * 十进制价格基于等于隐含百分比的十进制乘数。因此，100.182的市场价格在Strata中表示为1.00182。
 */
@BeanDefinition(constructorScope = "package")
public final class DsfTrade
        implements SecuritizedProductTrade<Dsf>, ResolvableTrade<ResolvedDsfTrade>, ImmutableBean, Serializable {

    /**
     * 附加的交易信息，默认为空实例。
     * <p>
     * 允许附加额外的信息到交易中。
     * 调用{@link DsfTrade#resolve(ReferenceData)}时需要交易日期。
     */
    @PropertyDefinition(validate = "notNull", overrideGet = true)
    private final TradeInfo info;
    /**
     * The future that was traded.
     * <p>
     * 该属性捕获交易的合同财务细节。
     */
    @PropertyDefinition(validate = "notNull", overrideGet = true)
    private final Dsf product;
    /**
     * 交易的数量。
     * <p>
     * 这是交易的合同数量。如果买入，这将是正的；如果卖出，这将是负的。
     */
    @PropertyDefinition(overrideGet = true)
    private final double quantity;
    /**
     * 以十进制形式交易的价格。
     * <p>
     * 这是交易发生时商定的价格。
     * <p>
     * Strata在贸易模型、价格和市场数据中对DSF使用了十进制价格（decimal prices）。
     * 十进制价格基于等于隐含百分比的十进制乘数。因此，100.182的市场价格在Strata中表示为1.00182。
     */
    @PropertyDefinition(validate = "ArgChecker.notNegative", overrideGet = true)
    private final double price;

    //-------------------------------------------------------------------------
    @ImmutableDefaults
    private static void applyDefaults(Builder builder) {
        builder.info = TradeInfo.empty();
    }

    //-------------------------------------------------------------------------
    @Override
    public DsfTrade withInfo(TradeInfo info) {
        return new DsfTrade(info, product, quantity, price);
    }

    @Override
    public DsfTrade withQuantity(double quantity) {
        return new DsfTrade(info, product, quantity, price);
    }

    @Override
    public DsfTrade withPrice(double price) {
        return new DsfTrade(info, product, quantity, price);
    }

    //-------------------------------------------------------------------------
    @Override
    public PortfolioItemSummary summarize() {
        // ID x 200
        String description = getSecurityId().getStandardId().getValue() + " x " + SummarizerUtils.value(getQuantity());
        return SummarizerUtils.summary(this, ProductType.DSF, description, getCurrency());
    }

    @Override
    public ResolvedDsfTrade resolve(ReferenceData refData) {
        if (!info.getTradeDate().isPresent()) {
            throw new IllegalArgumentException("Trade date on TradeInfo must be present");
        }
        ResolvedDsf resolved = getProduct().resolve(refData);
        TradedPrice tradedPrice = TradedPrice.of(info.getTradeDate().get(), price);
        return new ResolvedDsfTrade(info, resolved, quantity, tradedPrice);
    }

    //------------------------- AUTOGENERATED START -------------------------

    /**
     * The meta-bean for {@code DsfTrade}.
     *
     * @return the meta-bean, not null
     */
    public static DsfTrade.Meta meta() {
        return DsfTrade.Meta.INSTANCE;
    }

    static {
        MetaBean.register(DsfTrade.Meta.INSTANCE);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns a builder used to create an instance of the bean.
     *
     * @return the builder, not null
     */
    public static DsfTrade.Builder builder() {
        return new DsfTrade.Builder();
    }

    /**
     * Creates an instance.
     *
     * @param info     the value of the property, not null
     * @param product  the value of the property, not null
     * @param quantity the value of the property
     * @param price    the value of the property
     */
    DsfTrade(
            TradeInfo info,
            Dsf product,
            double quantity,
            double price) {
        JodaBeanUtils.notNull(info, "info");
        JodaBeanUtils.notNull(product, "product");
        ArgChecker.notNegative(price, "price");
        this.info = info;
        this.product = product;
        this.quantity = quantity;
        this.price = price;
    }

    @Override
    public DsfTrade.Meta metaBean() {
        return DsfTrade.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------

    /**
     * Gets the additional trade information, defaulted to an empty instance.
     * <p>
     * This allows additional information to be attached to the trade.
     * The trade date is required when calling {@link DsfTrade#resolve(ReferenceData)}.
     *
     * @return the value of the property, not null
     */
    @Override
    public TradeInfo getInfo() {
        return info;
    }

    //-----------------------------------------------------------------------

    /**
     * Gets the future that was traded.
     * <p>
     * The product captures the contracted financial details of the trade.
     *
     * @return the value of the property, not null
     */
    @Override
    public Dsf getProduct() {
        return product;
    }

    //-----------------------------------------------------------------------

    /**
     * Gets the quantity that was traded.
     * <p>
     * This is the number of contracts that were traded.
     * This will be positive if buying and negative if selling.
     *
     * @return the value of the property
     */
    @Override
    public double getQuantity() {
        return quantity;
    }

    //-----------------------------------------------------------------------

    /**
     * Gets the price that was traded, in decimal form.
     * <p>
     * This is the price agreed when the trade occurred.
     * <p>
     * Strata uses <i>decimal prices</i> for DSFs in the trade model, pricers and market data.
     * The decimal price is based on the decimal multiplier equivalent to the implied percentage.
     * Thus the market price of 100.182 is represented in Strata by 1.00182.
     *
     * @return the value of the property
     */
    @Override
    public double getPrice() {
        return price;
    }

    //-----------------------------------------------------------------------

    /**
     * Returns a builder that allows this bean to be mutated.
     *
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            DsfTrade other = (DsfTrade) obj;
            return JodaBeanUtils.equal(info, other.info) &&
                    JodaBeanUtils.equal(product, other.product) &&
                    JodaBeanUtils.equal(quantity, other.quantity) &&
                    JodaBeanUtils.equal(price, other.price);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(info);
        hash = hash * 31 + JodaBeanUtils.hashCode(product);
        hash = hash * 31 + JodaBeanUtils.hashCode(quantity);
        hash = hash * 31 + JodaBeanUtils.hashCode(price);
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(160);
        buf.append("DsfTrade{");
        buf.append("info").append('=').append(info).append(',').append(' ');
        buf.append("product").append('=').append(product).append(',').append(' ');
        buf.append("quantity").append('=').append(quantity).append(',').append(' ');
        buf.append("price").append('=').append(JodaBeanUtils.toString(price));
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------

    /**
     * The meta-bean for {@code DsfTrade}.
     */
    public static final class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code info} property.
         */
        private final MetaProperty<TradeInfo> info = DirectMetaProperty.ofImmutable(
                this, "info", DsfTrade.class, TradeInfo.class);
        /**
         * The meta-property for the {@code product} property.
         */
        private final MetaProperty<Dsf> product = DirectMetaProperty.ofImmutable(
                this, "product", DsfTrade.class, Dsf.class);
        /**
         * The meta-property for the {@code quantity} property.
         */
        private final MetaProperty<Double> quantity = DirectMetaProperty.ofImmutable(
                this, "quantity", DsfTrade.class, Double.TYPE);
        /**
         * The meta-property for the {@code price} property.
         */
        private final MetaProperty<Double> price = DirectMetaProperty.ofImmutable(
                this, "price", DsfTrade.class, Double.TYPE);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "info",
                "product",
                "quantity",
                "price");

        /**
         * Restricted constructor.
         */
        private Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3237038:  // info
                    return info;
                case -309474065:  // product
                    return product;
                case -1285004149:  // quantity
                    return quantity;
                case 106934601:  // price
                    return price;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public DsfTrade.Builder builder() {
            return new DsfTrade.Builder();
        }

        @Override
        public Class<? extends DsfTrade> beanType() {
            return DsfTrade.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------

        /**
         * The meta-property for the {@code info} property.
         *
         * @return the meta-property, not null
         */
        public MetaProperty<TradeInfo> info() {
            return info;
        }

        /**
         * The meta-property for the {@code product} property.
         *
         * @return the meta-property, not null
         */
        public MetaProperty<Dsf> product() {
            return product;
        }

        /**
         * The meta-property for the {@code quantity} property.
         *
         * @return the meta-property, not null
         */
        public MetaProperty<Double> quantity() {
            return quantity;
        }

        /**
         * The meta-property for the {@code price} property.
         *
         * @return the meta-property, not null
         */
        public MetaProperty<Double> price() {
            return price;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3237038:  // info
                    return ((DsfTrade) bean).getInfo();
                case -309474065:  // product
                    return ((DsfTrade) bean).getProduct();
                case -1285004149:  // quantity
                    return ((DsfTrade) bean).getQuantity();
                case 106934601:  // price
                    return ((DsfTrade) bean).getPrice();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------

    /**
     * The bean-builder for {@code DsfTrade}.
     */
    public static final class Builder extends DirectFieldsBeanBuilder<DsfTrade> {

        private TradeInfo info;
        private Dsf product;
        private double quantity;
        private double price;

        /**
         * Restricted constructor.
         */
        private Builder() {
            applyDefaults(this);
        }

        /**
         * Restricted copy constructor.
         *
         * @param beanToCopy the bean to copy from, not null
         */
        private Builder(DsfTrade beanToCopy) {
            this.info = beanToCopy.getInfo();
            this.product = beanToCopy.getProduct();
            this.quantity = beanToCopy.getQuantity();
            this.price = beanToCopy.getPrice();
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3237038:  // info
                    return info;
                case -309474065:  // product
                    return product;
                case -1285004149:  // quantity
                    return quantity;
                case 106934601:  // price
                    return price;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case 3237038:  // info
                    this.info = (TradeInfo) newValue;
                    break;
                case -309474065:  // product
                    this.product = (Dsf) newValue;
                    break;
                case -1285004149:  // quantity
                    this.quantity = (Double) newValue;
                    break;
                case 106934601:  // price
                    this.price = (Double) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public DsfTrade build() {
            return new DsfTrade(
                    info,
                    product,
                    quantity,
                    price);
        }

        //-----------------------------------------------------------------------

        /**
         * Sets the additional trade information, defaulted to an empty instance.
         * <p>
         * This allows additional information to be attached to the trade.
         * The trade date is required when calling {@link DsfTrade#resolve(ReferenceData)}.
         *
         * @param info the new value, not null
         * @return this, for chaining, not null
         */
        public Builder info(TradeInfo info) {
            JodaBeanUtils.notNull(info, "info");
            this.info = info;
            return this;
        }

        /**
         * Sets the future that was traded.
         * <p>
         * The product captures the contracted financial details of the trade.
         *
         * @param product the new value, not null
         * @return this, for chaining, not null
         */
        public Builder product(Dsf product) {
            JodaBeanUtils.notNull(product, "product");
            this.product = product;
            return this;
        }

        /**
         * Sets the quantity that was traded.
         * <p>
         * This is the number of contracts that were traded.
         * This will be positive if buying and negative if selling.
         *
         * @param quantity the new value
         * @return this, for chaining, not null
         */
        public Builder quantity(double quantity) {
            this.quantity = quantity;
            return this;
        }

        /**
         * Sets the price that was traded, in decimal form.
         * <p>
         * This is the price agreed when the trade occurred.
         * <p>
         * Strata uses <i>decimal prices</i> for DSFs in the trade model, pricers and market data.
         * The decimal price is based on the decimal multiplier equivalent to the implied percentage.
         * Thus the market price of 100.182 is represented in Strata by 1.00182.
         *
         * @param price the new value
         * @return this, for chaining, not null
         */
        public Builder price(double price) {
            ArgChecker.notNegative(price, "price");
            this.price = price;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(160);
            buf.append("DsfTrade.Builder{");
            buf.append("info").append('=').append(JodaBeanUtils.toString(info)).append(',').append(' ');
            buf.append("product").append('=').append(JodaBeanUtils.toString(product)).append(',').append(' ');
            buf.append("quantity").append('=').append(JodaBeanUtils.toString(quantity)).append(',').append(' ');
            buf.append("price").append('=').append(JodaBeanUtils.toString(price));
            buf.append('}');
            return buf.toString();
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
